import QRCodeStyling from "qr-code-styling";
import { ElementColor } from "./classes/Color";
import { QRImageStyle, QRImageShadow, QRDotStyle, QRCornerDotStyle, QRCornerSquareStyle, QRErrorCorrectionLevel, QRVersion, QROptions, OnGenerated, Extension, QRMode } from "./type";
declare class QR {
    private pause;
    image: string;
    imageWidth: number;
    imageMargin: number;
    imageStyle: QRImageStyle;
    imageShadow: QRImageShadow;
    imageShadowColor: string;
    hideBehindImageDots: boolean;
    saveImageAsBase64BlobWhenTypeIsSVG: boolean;
    imageCrossOrigin: 'anonymous' | 'use-credentials';
    backgroundColor: Partial<ElementColor>;
    dotsStyle: QRDotStyle;
    dotsColor: Partial<ElementColor>;
    cornersDotStyle: QRCornerDotStyle;
    cornersDotColor: Partial<ElementColor>;
    cornersSquareStyle: QRCornerSquareStyle;
    cornersSquareColor: Partial<ElementColor>;
    text: string;
    errorCorrectionLevel: QRErrorCorrectionLevel;
    version: QRVersion;
    height: number;
    width: number;
    type: 'svg' | 'canvas';
    mode: QRMode;
    margin: number;
    qrCodeStyling: QRCodeStyling;
    onGenerated: OnGenerated;
    generate(): void;
    getRawData(extension?: Extension): Promise<Blob | null>;
    saveAs(filename: string, extension?: Extension): Promise<void>;
    merge(_options: Partial<QR>): QR;
    fromJSON(options: Partial<QR>): void;
    toJSON(): Partial<this>;
    waitForSetting(callback: (qr: QR) => void): void;
    get canvas(): HTMLCanvasElement;
    get svg(): SVGElement;
    constructor(options: QROptions);
}
export default QR;
